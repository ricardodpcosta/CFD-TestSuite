# Auto-generated by generate_code.py

import math

# Global constants
rA = 1.0
rAB = 0.75
rB = 0.5
betaAB_1 = 0.04
betaAB_2 = 8.0
alphaA = 2.0
alphaB = 1.0
wA = 1.0
wB = -1.0

# Function RAB
def RAB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = rAB*(betaAB_1*math.cos(betaAB_2*theta) + 1)
    return res

# Function nAB
def nAB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = betaAB_1*betaAB_2*math.sin(theta)*math.sin(betaAB_2*theta)/math.sqrt(betaAB_1**2*betaAB_2* \
        *2*math.sin(betaAB_2*theta)**2 + betaAB_1**2*math.cos(betaAB_2*theta)**2 + 2*betaAB_1 \
        *math.cos(betaAB_2*theta) + 1) + (-betaAB_1*math.cos(betaAB_2*theta) - 1)*math.cos(theta) \
        /math.sqrt(betaAB_1**2*betaAB_2**2*math.sin(betaAB_2*theta)**2 + betaAB_1**2*math.cos(betaAB_2 \
        *theta)**2 + 2*betaAB_1*math.cos(betaAB_2*theta) + 1)
    res[1] = -betaAB_1*betaAB_2*math.sin(betaAB_2*theta)*math.cos(theta)/math.sqrt(betaAB_1**2*betaAB_2 \
        **2*math.sin(betaAB_2*theta)**2 + betaAB_1**2*math.cos(betaAB_2*theta)**2 + 2*betaAB_1 \
        *math.cos(betaAB_2*theta) + 1) + (-betaAB_1*math.cos(betaAB_2*theta) - 1)*math.sin(theta) \
        /math.sqrt(betaAB_1**2*betaAB_2**2*math.sin(betaAB_2*theta)**2 + betaAB_1**2*math.cos(betaAB_2 \
        *theta)**2 + 2*betaAB_1*math.cos(betaAB_2*theta) + 1)
    return res

# Function uA
def uA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = -r*wA*math.sin(theta) + (-betaAB_1*betaAB_2*r**2*rAB*wA*math.sin(betaAB_2*theta) \
        + betaAB_1*betaAB_2*r*rA*rAB*wA*math.sin(betaAB_2*theta))*math.cos(theta)/(betaAB_1*rAB \
        *math.cos(betaAB_2*theta) - rA + rAB)
    res[1] = r*wA*math.cos(theta) + (-betaAB_1*betaAB_2*r**2*rAB*wA*math.sin(betaAB_2*theta) + betaAB_1 \
        *betaAB_2*r*rA*rAB*wA*math.sin(betaAB_2*theta))*math.sin(theta)/(betaAB_1*rAB*math.cos(betaAB_2 \
        *theta) - rA + rAB)
    return res

# Function uB
def uB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = -r*wB*math.sin(theta) + (-betaAB_1*betaAB_2*r**2*rAB*wB*math.sin(betaAB_2*theta) \
        + betaAB_1*betaAB_2*r*rAB*rB*wB*math.sin(betaAB_2*theta))*math.cos(theta)/(betaAB_1*rAB \
        *math.cos(betaAB_2*theta) + rAB - rB)
    res[1] = r*wB*math.cos(theta) + (-betaAB_1*betaAB_2*r**2*rAB*wB*math.sin(betaAB_2*theta) + betaAB_1 \
        *betaAB_2*r*rAB*rB*wB*math.sin(betaAB_2*theta))*math.sin(theta)/(betaAB_1*rAB*math.cos(betaAB_2 \
        *theta) + rAB - rB)
    return res

# Function phiA
def phiA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = alphaB*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bA = (alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) - alphaB*h*rAB \
        *math.log(rAB))/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) \
        + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = aA*math.log((betaAB_1**2*r*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB \
        *math.cos(betaAB_2*theta) + 2*betaAB_1*r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA \
        *rAB*rB*math.cos(betaAB_2*theta) - r*rA*rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)/(betaAB_1* \
        *2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2 \
        *betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) \
        - rA*rAB + rA*rB + rAB**2 - rAB*rB)) + bA
    return res

# Function phiB
def phiB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aB = alphaA*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bB = -alphaA*h*rAB*math.log(rB)/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB \
        *math.log(rB) + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = aB*math.log((betaAB_1**2*r*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB \
        *math.cos(betaAB_2*theta) + 2*betaAB_1*r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA \
        *rAB*rB*math.cos(betaAB_2*theta) - r*rA*rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)/(betaAB_1* \
        *2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2 \
        *betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) \
        - rA*rAB + rA*rB + rAB**2 - rAB*rB)) + bB
    return res

# Function fA
def fA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = alphaB*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bA = (alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) - alphaB*h*rAB \
        *math.log(rAB))/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) \
        + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = -alphaA*((-2*aA*betaAB_1*r*rAB*math.cos(betaAB_2*theta)/(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB) + aA*r*(-betaAB_1**2*rAB**2*math.cos(betaAB_2 \
        *theta)**2 + 2*betaAB_1*r*rAB*math.cos(betaAB_2*theta) - 2*betaAB_1*rAB**2 \
        *math.cos(betaAB_2*theta) + rA*rAB - rA*rB - rAB**2 + rAB*rB)*(betaAB_1**2*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - 2*betaAB_1*r*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *rAB**2*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)/(betaAB_1**2*r*rAB \
        **2*math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2 \
        *betaAB_1*r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2 \
        *theta) - r*rA*rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)**2 + aA*(betaAB_1**2*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - 2*betaAB_1*r*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *rAB**2*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)/(betaAB_1**2*r*rAB \
        **2*math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2 \
        *betaAB_1*r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2 \
        *theta) - r*rA*rAB + r*rA*rB + r*rAB**2 - r*rAB*rB))/r + (aA*((2*betaAB_1**2*betaAB_2 \
        *rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - betaAB_1*betaAB_2*rA*rAB \
        *math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) \
        - betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 \
        - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2 \
        *theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)* \
        *2 + (-2*betaAB_1**2*betaAB_2*r*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) + betaAB_1*betaAB_2*r**2*rAB*math.sin(betaAB_2*theta) - 2*betaAB_1*betaAB_2*r \
        *rAB**2*math.sin(betaAB_2*theta) + betaAB_1*betaAB_2*rA*rAB*rB*math.sin(betaAB_2 \
        *theta))/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB \
        *math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB \
        *rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB))*(-2*betaAB_1**2 \
        *betaAB_2*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) + betaAB_1*betaAB_2 \
        *rA*rAB*math.sin(betaAB_2*theta) - 2*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) \
        + betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))/(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB) + aA*((2*betaAB_1**2*betaAB_2*rAB**2 \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - betaAB_1*betaAB_2*rA*rAB \
        *math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) \
        - betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 \
        - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2 \
        *theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)* \
        *2 + (-2*betaAB_1**2*betaAB_2*r*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) + betaAB_1*betaAB_2*r**2*rAB*math.sin(betaAB_2*theta) - 2*betaAB_1*betaAB_2*r \
        *rAB**2*math.sin(betaAB_2*theta) + betaAB_1*betaAB_2*rA*rAB*rB*math.sin(betaAB_2 \
        *theta))/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB \
        *math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB \
        *rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB))*(2*betaAB_1**2 \
        *betaAB_2*r*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - betaAB_1 \
        *betaAB_2*r**2*rAB*math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*r*rAB**2 \
        *math.sin(betaAB_2*theta) - betaAB_1*betaAB_2*rA*rAB*rB*math.sin(betaAB_2*theta)) \
        *(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB*math.cos(betaAB_2 \
        *theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB*rB \
        *math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)/(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)**2 + aA*((2*betaAB_1**2*betaAB_2*rAB**2 \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - betaAB_1*betaAB_2*rA*rAB \
        *math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) \
        - betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(4*betaAB_1**2*betaAB_2*rAB**2 \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - 2*betaAB_1*betaAB_2*rA*rAB \
        *math.sin(betaAB_2*theta) + 4*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) - 2 \
        *betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 \
        - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2 \
        *theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)* \
        *3 + 2*(2*betaAB_1**2*betaAB_2*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) - betaAB_1*betaAB_2*rA*rAB*math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*rAB* \
        *2*math.sin(betaAB_2*theta) - betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(-2 \
        *betaAB_1**2*betaAB_2*r*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) \
        + betaAB_1*betaAB_2*r**2*rAB*math.sin(betaAB_2*theta) - 2*betaAB_1*betaAB_2*r*rAB**2 \
        *math.sin(betaAB_2*theta) + betaAB_1*betaAB_2*rA*rAB*rB*math.sin(betaAB_2*theta)) \
        /(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB*math.cos(betaAB_2 \
        *theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB*rB \
        *math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)**2 + (-2*betaAB_1**2 \
        *betaAB_2**2*rAB**2*math.sin(betaAB_2*theta)**2 + 2*betaAB_1**2*betaAB_2**2*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*betaAB_2**2*rA*rAB*math.cos(betaAB_2*theta) + 2 \
        *betaAB_1*betaAB_2**2*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*betaAB_2**2*rAB*rB \
        *math.cos(betaAB_2*theta))*(betaAB_1**2*r*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1 \
        *r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*r*rAB**2*math.cos(betaAB_2*theta) \
        - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA*rAB + r*rA*rB + r*rAB**2 - r*rAB \
        *rB)/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB \
        *math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB \
        *rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)**2 + (2*betaAB_1**2 \
        *betaAB_2**2*r*rAB**2*math.sin(betaAB_2*theta)**2 - 2*betaAB_1**2*betaAB_2**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 + betaAB_1*betaAB_2**2*r**2*rAB*math.cos(betaAB_2*theta) \
        - 2*betaAB_1*betaAB_2**2*r*rAB**2*math.cos(betaAB_2*theta) + betaAB_1*betaAB_2**2*rA \
        *rAB*rB*math.cos(betaAB_2*theta))/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 \
        - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2 \
        *theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)) \
        *(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB*math.cos(betaAB_2 \
        *theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB*rB \
        *math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)/(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB))/r**2) + (aA*betaAB_1**4*betaAB_2*r**2*rAB**4*wA \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**3 - aA*betaAB_1**4*betaAB_2*r*rA \
        *rAB**4*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**3 - 2*aA*betaAB_1**3 \
        *betaAB_2*r**3*rAB**3*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 + 2*aA \
        *betaAB_1**3*betaAB_2*r**2*rA*rAB**3*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta)**2 + 3*aA*betaAB_1**3*betaAB_2*r**2*rAB**4*wA*math.sin(betaAB_2*theta) \
        *math.cos(betaAB_2*theta)**2 - aA*betaAB_1**3*betaAB_2*r**2*rAB**3*rB*wA \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 + aA*betaAB_1**3*betaAB_2*r**2 \
        *rAB**3*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 - 3*aA*betaAB_1**3 \
        *betaAB_2*r*rA*rAB**4*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 + aA \
        *betaAB_1**3*betaAB_2*r*rA*rAB**3*rB*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta)**2 - aA*betaAB_1**3*betaAB_2*r*rA*rAB**3*wA*math.sin(betaAB_2*theta) \
        *math.cos(betaAB_2*theta)**2 - aA*betaAB_1**3*betaAB_2*r*rAB**3*rB*wA*math.sin(betaAB_2 \
        *theta)*math.cos(betaAB_2*theta)**2 + aA*betaAB_1**3*betaAB_2*rA*rAB**3*rB*wA \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 - 2*aA*betaAB_1**2*betaAB_2*r**3 \
        *rAB**3*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) + 2*aA*betaAB_1**2 \
        *betaAB_2*r**3*rAB**2*rB*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) + aA \
        *betaAB_1**2*betaAB_2*r**2*rA*rAB**3*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) - aA*betaAB_1**2*betaAB_2*r**2*rA*rAB**2*rB*wA*math.sin(betaAB_2*theta) \
        *math.cos(betaAB_2*theta) + 3*aA*betaAB_1**2*betaAB_2*r**2*rAB**4*wA*math.sin(betaAB_2 \
        *theta)*math.cos(betaAB_2*theta) - 3*aA*betaAB_1**2*betaAB_2*r**2*rAB**3*rB*wA \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) + aA*betaAB_1**2*betaAB_2*r*rA**2 \
        *rAB**3*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - aA*betaAB_1**2*betaAB_2 \
        *r*rA**2*rAB**2*rB*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - 3*aA*betaAB_1 \
        **2*betaAB_2*r*rA*rAB**4*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) + 3*aA \
        *betaAB_1**2*betaAB_2*r*rA*rAB**3*rB*wA*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) - aA*betaAB_1*betaAB_2*r**2*rA*rAB**3*wA*math.sin(betaAB_2*theta) + 2*aA \
        *betaAB_1*betaAB_2*r**2*rA*rAB**2*rB*wA*math.sin(betaAB_2*theta) + aA*betaAB_1*betaAB_2 \
        *r**2*rA*rAB**2*wA*math.sin(betaAB_2*theta) - aA*betaAB_1*betaAB_2*r**2*rA*rAB*rB**2*wA \
        *math.sin(betaAB_2*theta) - aA*betaAB_1*betaAB_2*r**2*rA*rAB*rB*wA*math.sin(betaAB_2 \
        *theta) + aA*betaAB_1*betaAB_2*r**2*rAB**4*wA*math.sin(betaAB_2*theta) - 2*aA*betaAB_1 \
        *betaAB_2*r**2*rAB**3*rB*wA*math.sin(betaAB_2*theta) - aA*betaAB_1*betaAB_2*r**2*rAB**3 \
        *wA*math.sin(betaAB_2*theta) + aA*betaAB_1*betaAB_2*r**2*rAB**2*rB**2*wA \
        *math.sin(betaAB_2*theta) + aA*betaAB_1*betaAB_2*r**2*rAB**2*rB*wA*math.sin(betaAB_2 \
        *theta) + aA*betaAB_1*betaAB_2*r*rA**2*rAB**3*wA*math.sin(betaAB_2*theta) - 2*aA \
        *betaAB_1*betaAB_2*r*rA**2*rAB**2*rB*wA*math.sin(betaAB_2*theta) - aA*betaAB_1*betaAB_2 \
        *r*rA**2*rAB**2*wA*math.sin(betaAB_2*theta) + aA*betaAB_1*betaAB_2*r*rA**2*rAB*rB**2*wA \
        *math.sin(betaAB_2*theta) + aA*betaAB_1*betaAB_2*r*rA**2*rAB*rB*wA*math.sin(betaAB_2 \
        *theta) - aA*betaAB_1*betaAB_2*r*rA*rAB**4*wA*math.sin(betaAB_2*theta) + 2*aA*betaAB_1 \
        *betaAB_2*r*rA*rAB**3*rB*wA*math.sin(betaAB_2*theta) + aA*betaAB_1*betaAB_2*r*rA*rAB**3 \
        *wA*math.sin(betaAB_2*theta) - aA*betaAB_1*betaAB_2*r*rA*rAB**2*rB**2*wA \
        *math.sin(betaAB_2*theta) - 2*aA*betaAB_1*betaAB_2*r*rA*rAB**2*rB*wA*math.sin(betaAB_2 \
        *theta) + aA*betaAB_1*betaAB_2*r*rA*rAB*rB**2*wA*math.sin(betaAB_2*theta) + aA*betaAB_1 \
        *betaAB_2*r*rAB**3*rB*wA*math.sin(betaAB_2*theta) - aA*betaAB_1*betaAB_2*r*rAB**2*rB**2 \
        *wA*math.sin(betaAB_2*theta) + aA*betaAB_1*betaAB_2*rA**2*rAB**2*rB*wA \
        *math.sin(betaAB_2*theta) - aA*betaAB_1*betaAB_2*rA**2*rAB*rB**2*wA*math.sin(betaAB_2 \
        *theta) - aA*betaAB_1*betaAB_2*rA*rAB**3*rB*wA*math.sin(betaAB_2*theta) + aA*betaAB_1 \
        *betaAB_2*rA*rAB**2*rB**2*wA*math.sin(betaAB_2*theta))/(-betaAB_1**4*r*rAB**4 \
        *math.cos(betaAB_2*theta)**4 + betaAB_1**3*r**2*rAB**3*math.cos(betaAB_2*theta)**3 \
        + betaAB_1**3*r*rA*rAB**3*math.cos(betaAB_2*theta)**3 - 4*betaAB_1**3*r*rAB**4 \
        *math.cos(betaAB_2*theta)**3 + betaAB_1**3*r*rAB**3*rB*math.cos(betaAB_2*theta)**3 \
        + betaAB_1**3*rA*rAB**3*rB*math.cos(betaAB_2*theta)**3 - betaAB_1**2*r**2*rA*rAB**2 \
        *math.cos(betaAB_2*theta)**2 + 2*betaAB_1**2*r**2*rAB**3*math.cos(betaAB_2*theta)**2 \
        - betaAB_1**2*r**2*rAB**2*rB*math.cos(betaAB_2*theta)**2 + 4*betaAB_1**2*r*rA*rAB**3 \
        *math.cos(betaAB_2*theta)**2 - 2*betaAB_1**2*r*rA*rAB**2*rB*math.cos(betaAB_2*theta)* \
        *2 - 6*betaAB_1**2*r*rAB**4*math.cos(betaAB_2*theta)**2 + 4*betaAB_1**2*r*rAB**3*rB \
        *math.cos(betaAB_2*theta)**2 - betaAB_1**2*rA**2*rAB**2*rB*math.cos(betaAB_2*theta)**2 \
        + 2*betaAB_1**2*rA*rAB**3*rB*math.cos(betaAB_2*theta)**2 - betaAB_1**2*rA*rAB**2*rB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rA*rAB**2*math.cos(betaAB_2*theta) \
        + betaAB_1*r**2*rA*rAB*rB*math.cos(betaAB_2*theta) + betaAB_1*r**2*rAB**3 \
        *math.cos(betaAB_2*theta) - betaAB_1*r**2*rAB**2*rB*math.cos(betaAB_2*theta) - betaAB_1 \
        *r*rA**2*rAB**2*math.cos(betaAB_2*theta) + betaAB_1*r*rA**2*rAB*rB*math.cos(betaAB_2 \
        *theta) + 5*betaAB_1*r*rA*rAB**3*math.cos(betaAB_2*theta) - 6*betaAB_1*r*rA*rAB**2*rB \
        *math.cos(betaAB_2*theta) + betaAB_1*r*rA*rAB*rB**2*math.cos(betaAB_2*theta) - 4 \
        *betaAB_1*r*rAB**4*math.cos(betaAB_2*theta) + 5*betaAB_1*r*rAB**3*rB*math.cos(betaAB_2 \
        *theta) - betaAB_1*r*rAB**2*rB**2*math.cos(betaAB_2*theta) - betaAB_1*rA**2*rAB**2*rB \
        *math.cos(betaAB_2*theta) + betaAB_1*rA**2*rAB*rB**2*math.cos(betaAB_2*theta) \
        + betaAB_1*rA*rAB**3*rB*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB**2*rB**2 \
        *math.cos(betaAB_2*theta) - r*rA**2*rAB**2 + 2*r*rA**2*rAB*rB - r*rA**2*rB**2 + 2*r*rA \
        *rAB**3 - 4*r*rA*rAB**2*rB + 2*r*rA*rAB*rB**2 - r*rAB**4 + 2*r*rAB**3*rB - r*rAB**2*rB* \
        *2)
    return res

# Function fB
def fB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aB = alphaA*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bB = -alphaA*h*rAB*math.log(rB)/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB \
        *math.log(rB) + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = -alphaB*((-2*aB*betaAB_1*r*rAB*math.cos(betaAB_2*theta)/(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB) + aB*r*(-betaAB_1**2*rAB**2*math.cos(betaAB_2 \
        *theta)**2 + 2*betaAB_1*r*rAB*math.cos(betaAB_2*theta) - 2*betaAB_1*rAB**2 \
        *math.cos(betaAB_2*theta) + rA*rAB - rA*rB - rAB**2 + rAB*rB)*(betaAB_1**2*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - 2*betaAB_1*r*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *rAB**2*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)/(betaAB_1**2*r*rAB \
        **2*math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2 \
        *betaAB_1*r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2 \
        *theta) - r*rA*rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)**2 + aB*(betaAB_1**2*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - 2*betaAB_1*r*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *rAB**2*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)/(betaAB_1**2*r*rAB \
        **2*math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2 \
        *betaAB_1*r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2 \
        *theta) - r*rA*rAB + r*rA*rB + r*rAB**2 - r*rAB*rB))/r + (aB*((2*betaAB_1**2*betaAB_2 \
        *rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - betaAB_1*betaAB_2*rA*rAB \
        *math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) \
        - betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 \
        - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2 \
        *theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)* \
        *2 + (-2*betaAB_1**2*betaAB_2*r*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) + betaAB_1*betaAB_2*r**2*rAB*math.sin(betaAB_2*theta) - 2*betaAB_1*betaAB_2*r \
        *rAB**2*math.sin(betaAB_2*theta) + betaAB_1*betaAB_2*rA*rAB*rB*math.sin(betaAB_2 \
        *theta))/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB \
        *math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB \
        *rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB))*(-2*betaAB_1**2 \
        *betaAB_2*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) + betaAB_1*betaAB_2 \
        *rA*rAB*math.sin(betaAB_2*theta) - 2*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) \
        + betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))/(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB) + aB*((2*betaAB_1**2*betaAB_2*rAB**2 \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - betaAB_1*betaAB_2*rA*rAB \
        *math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) \
        - betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 \
        - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2 \
        *theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)* \
        *2 + (-2*betaAB_1**2*betaAB_2*r*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) + betaAB_1*betaAB_2*r**2*rAB*math.sin(betaAB_2*theta) - 2*betaAB_1*betaAB_2*r \
        *rAB**2*math.sin(betaAB_2*theta) + betaAB_1*betaAB_2*rA*rAB*rB*math.sin(betaAB_2 \
        *theta))/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB \
        *math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB \
        *rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB))*(2*betaAB_1**2 \
        *betaAB_2*r*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - betaAB_1 \
        *betaAB_2*r**2*rAB*math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*r*rAB**2 \
        *math.sin(betaAB_2*theta) - betaAB_1*betaAB_2*rA*rAB*rB*math.sin(betaAB_2*theta)) \
        *(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB*math.cos(betaAB_2 \
        *theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB*rB \
        *math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)/(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)**2 + aB*((2*betaAB_1**2*betaAB_2*rAB**2 \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - betaAB_1*betaAB_2*rA*rAB \
        *math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) \
        - betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(4*betaAB_1**2*betaAB_2*rAB**2 \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - 2*betaAB_1*betaAB_2*rA*rAB \
        *math.sin(betaAB_2*theta) + 4*betaAB_1*betaAB_2*rAB**2*math.sin(betaAB_2*theta) - 2 \
        *betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB)/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 \
        - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2 \
        *theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)* \
        *3 + 2*(2*betaAB_1**2*betaAB_2*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) - betaAB_1*betaAB_2*rA*rAB*math.sin(betaAB_2*theta) + 2*betaAB_1*betaAB_2*rAB* \
        *2*math.sin(betaAB_2*theta) - betaAB_1*betaAB_2*rAB*rB*math.sin(betaAB_2*theta))*(-2 \
        *betaAB_1**2*betaAB_2*r*rAB**2*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) \
        + betaAB_1*betaAB_2*r**2*rAB*math.sin(betaAB_2*theta) - 2*betaAB_1*betaAB_2*r*rAB**2 \
        *math.sin(betaAB_2*theta) + betaAB_1*betaAB_2*rA*rAB*rB*math.sin(betaAB_2*theta)) \
        /(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB*math.cos(betaAB_2 \
        *theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB*rB \
        *math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)**2 + (-2*betaAB_1**2 \
        *betaAB_2**2*rAB**2*math.sin(betaAB_2*theta)**2 + 2*betaAB_1**2*betaAB_2**2*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*betaAB_2**2*rA*rAB*math.cos(betaAB_2*theta) + 2 \
        *betaAB_1*betaAB_2**2*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*betaAB_2**2*rAB*rB \
        *math.cos(betaAB_2*theta))*(betaAB_1**2*r*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1 \
        *r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*r*rAB**2*math.cos(betaAB_2*theta) \
        - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA*rAB + r*rA*rB + r*rAB**2 - r*rAB \
        *rB)/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB \
        *math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB \
        *rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)**2 + (2*betaAB_1**2 \
        *betaAB_2**2*r*rAB**2*math.sin(betaAB_2*theta)**2 - 2*betaAB_1**2*betaAB_2**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 + betaAB_1*betaAB_2**2*r**2*rAB*math.cos(betaAB_2*theta) \
        - 2*betaAB_1*betaAB_2**2*r*rAB**2*math.cos(betaAB_2*theta) + betaAB_1*betaAB_2**2*rA \
        *rAB*rB*math.cos(betaAB_2*theta))/(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 \
        - betaAB_1*rA*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2 \
        *theta) - betaAB_1*rAB*rB*math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)) \
        *(betaAB_1**2*rAB**2*math.cos(betaAB_2*theta)**2 - betaAB_1*rA*rAB*math.cos(betaAB_2 \
        *theta) + 2*betaAB_1*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rAB*rB \
        *math.cos(betaAB_2*theta) - rA*rAB + rA*rB + rAB**2 - rAB*rB)/(betaAB_1**2*r*rAB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rAB*math.cos(betaAB_2*theta) + 2*betaAB_1 \
        *r*rAB**2*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) - r*rA \
        *rAB + r*rA*rB + r*rAB**2 - r*rAB*rB))/r**2) + (aB*betaAB_1**4*betaAB_2*r**2*rAB**4*wB \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**3 - aB*betaAB_1**4*betaAB_2*r*rAB* \
        *4*rB*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**3 - 2*aB*betaAB_1**3 \
        *betaAB_2*r**3*rAB**3*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 - aB \
        *betaAB_1**3*betaAB_2*r**2*rA*rAB**3*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta)**2 + 3*aB*betaAB_1**3*betaAB_2*r**2*rAB**4*wB*math.sin(betaAB_2*theta) \
        *math.cos(betaAB_2*theta)**2 + 2*aB*betaAB_1**3*betaAB_2*r**2*rAB**3*rB*wB \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 + aB*betaAB_1**3*betaAB_2*r**2 \
        *rAB**3*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 + aB*betaAB_1**3 \
        *betaAB_2*r*rA*rAB**3*rB*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 - aB \
        *betaAB_1**3*betaAB_2*r*rA*rAB**3*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)* \
        *2 - 3*aB*betaAB_1**3*betaAB_2*r*rAB**4*rB*wB*math.sin(betaAB_2*theta) \
        *math.cos(betaAB_2*theta)**2 - aB*betaAB_1**3*betaAB_2*r*rAB**3*rB*wB*math.sin(betaAB_2 \
        *theta)*math.cos(betaAB_2*theta)**2 + aB*betaAB_1**3*betaAB_2*rA*rAB**3*rB*wB \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta)**2 + 2*aB*betaAB_1**2*betaAB_2*r**3 \
        *rA*rAB**2*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - 2*aB*betaAB_1**2 \
        *betaAB_2*r**3*rAB**3*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - 3*aB \
        *betaAB_1**2*betaAB_2*r**2*rA*rAB**3*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) - aB*betaAB_1**2*betaAB_2*r**2*rA*rAB**2*rB*wB*math.sin(betaAB_2*theta) \
        *math.cos(betaAB_2*theta) + 3*aB*betaAB_1**2*betaAB_2*r**2*rAB**4*wB*math.sin(betaAB_2 \
        *theta)*math.cos(betaAB_2*theta) + aB*betaAB_1**2*betaAB_2*r**2*rAB**3*rB*wB \
        *math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) + 3*aB*betaAB_1**2*betaAB_2*r*rA*rAB \
        **3*rB*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - aB*betaAB_1**2*betaAB_2*r \
        *rA*rAB**2*rB**2*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) - 3*aB*betaAB_1* \
        *2*betaAB_2*r*rAB**4*rB*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2*theta) + aB \
        *betaAB_1**2*betaAB_2*r*rAB**3*rB**2*wB*math.sin(betaAB_2*theta)*math.cos(betaAB_2 \
        *theta) + aB*betaAB_1*betaAB_2*r**2*rA**2*rAB**2*wB*math.sin(betaAB_2*theta) - aB \
        *betaAB_1*betaAB_2*r**2*rA**2*rAB*rB*wB*math.sin(betaAB_2*theta) - 2*aB*betaAB_1 \
        *betaAB_2*r**2*rA*rAB**3*wB*math.sin(betaAB_2*theta) + 2*aB*betaAB_1*betaAB_2*r**2*rA \
        *rAB**2*rB*wB*math.sin(betaAB_2*theta) + aB*betaAB_1*betaAB_2*r**2*rA*rAB**2*wB \
        *math.sin(betaAB_2*theta) - aB*betaAB_1*betaAB_2*r**2*rA*rAB*rB*wB*math.sin(betaAB_2 \
        *theta) + aB*betaAB_1*betaAB_2*r**2*rAB**4*wB*math.sin(betaAB_2*theta) - aB*betaAB_1 \
        *betaAB_2*r**2*rAB**3*rB*wB*math.sin(betaAB_2*theta) - aB*betaAB_1*betaAB_2*r**2*rAB**3 \
        *wB*math.sin(betaAB_2*theta) + aB*betaAB_1*betaAB_2*r**2*rAB**2*rB*wB*math.sin(betaAB_2 \
        *theta) - aB*betaAB_1*betaAB_2*r*rA**2*rAB**2*rB*wB*math.sin(betaAB_2*theta) - aB \
        *betaAB_1*betaAB_2*r*rA**2*rAB**2*wB*math.sin(betaAB_2*theta) + aB*betaAB_1*betaAB_2*r \
        *rA**2*rAB*rB**2*wB*math.sin(betaAB_2*theta) + aB*betaAB_1*betaAB_2*r*rA**2*rAB*rB*wB \
        *math.sin(betaAB_2*theta) + 2*aB*betaAB_1*betaAB_2*r*rA*rAB**3*rB*wB*math.sin(betaAB_2 \
        *theta) + aB*betaAB_1*betaAB_2*r*rA*rAB**3*wB*math.sin(betaAB_2*theta) - 2*aB*betaAB_1 \
        *betaAB_2*r*rA*rAB**2*rB**2*wB*math.sin(betaAB_2*theta) - 2*aB*betaAB_1*betaAB_2*r*rA \
        *rAB**2*rB*wB*math.sin(betaAB_2*theta) + aB*betaAB_1*betaAB_2*r*rA*rAB*rB**2*wB \
        *math.sin(betaAB_2*theta) - aB*betaAB_1*betaAB_2*r*rAB**4*rB*wB*math.sin(betaAB_2 \
        *theta) + aB*betaAB_1*betaAB_2*r*rAB**3*rB**2*wB*math.sin(betaAB_2*theta) + aB*betaAB_1 \
        *betaAB_2*r*rAB**3*rB*wB*math.sin(betaAB_2*theta) - aB*betaAB_1*betaAB_2*r*rAB**2*rB**2 \
        *wB*math.sin(betaAB_2*theta) + aB*betaAB_1*betaAB_2*rA**2*rAB**2*rB*wB \
        *math.sin(betaAB_2*theta) - aB*betaAB_1*betaAB_2*rA**2*rAB*rB**2*wB*math.sin(betaAB_2 \
        *theta) - aB*betaAB_1*betaAB_2*rA*rAB**3*rB*wB*math.sin(betaAB_2*theta) + aB*betaAB_1 \
        *betaAB_2*rA*rAB**2*rB**2*wB*math.sin(betaAB_2*theta))/(-betaAB_1**4*r*rAB**4 \
        *math.cos(betaAB_2*theta)**4 + betaAB_1**3*r**2*rAB**3*math.cos(betaAB_2*theta)**3 \
        + betaAB_1**3*r*rA*rAB**3*math.cos(betaAB_2*theta)**3 - 4*betaAB_1**3*r*rAB**4 \
        *math.cos(betaAB_2*theta)**3 + betaAB_1**3*r*rAB**3*rB*math.cos(betaAB_2*theta)**3 \
        + betaAB_1**3*rA*rAB**3*rB*math.cos(betaAB_2*theta)**3 - betaAB_1**2*r**2*rA*rAB**2 \
        *math.cos(betaAB_2*theta)**2 + 2*betaAB_1**2*r**2*rAB**3*math.cos(betaAB_2*theta)**2 \
        - betaAB_1**2*r**2*rAB**2*rB*math.cos(betaAB_2*theta)**2 + 4*betaAB_1**2*r*rA*rAB**3 \
        *math.cos(betaAB_2*theta)**2 - 2*betaAB_1**2*r*rA*rAB**2*rB*math.cos(betaAB_2*theta)* \
        *2 - 6*betaAB_1**2*r*rAB**4*math.cos(betaAB_2*theta)**2 + 4*betaAB_1**2*r*rAB**3*rB \
        *math.cos(betaAB_2*theta)**2 - betaAB_1**2*rA**2*rAB**2*rB*math.cos(betaAB_2*theta)**2 \
        + 2*betaAB_1**2*rA*rAB**3*rB*math.cos(betaAB_2*theta)**2 - betaAB_1**2*rA*rAB**2*rB**2 \
        *math.cos(betaAB_2*theta)**2 - betaAB_1*r**2*rA*rAB**2*math.cos(betaAB_2*theta) \
        + betaAB_1*r**2*rA*rAB*rB*math.cos(betaAB_2*theta) + betaAB_1*r**2*rAB**3 \
        *math.cos(betaAB_2*theta) - betaAB_1*r**2*rAB**2*rB*math.cos(betaAB_2*theta) - betaAB_1 \
        *r*rA**2*rAB**2*math.cos(betaAB_2*theta) + betaAB_1*r*rA**2*rAB*rB*math.cos(betaAB_2 \
        *theta) + 5*betaAB_1*r*rA*rAB**3*math.cos(betaAB_2*theta) - 6*betaAB_1*r*rA*rAB**2*rB \
        *math.cos(betaAB_2*theta) + betaAB_1*r*rA*rAB*rB**2*math.cos(betaAB_2*theta) - 4 \
        *betaAB_1*r*rAB**4*math.cos(betaAB_2*theta) + 5*betaAB_1*r*rAB**3*rB*math.cos(betaAB_2 \
        *theta) - betaAB_1*r*rAB**2*rB**2*math.cos(betaAB_2*theta) - betaAB_1*rA**2*rAB**2*rB \
        *math.cos(betaAB_2*theta) + betaAB_1*rA**2*rAB*rB**2*math.cos(betaAB_2*theta) \
        + betaAB_1*rA*rAB**3*rB*math.cos(betaAB_2*theta) - betaAB_1*rA*rAB**2*rB**2 \
        *math.cos(betaAB_2*theta) - r*rA**2*rAB**2 + 2*r*rA**2*rAB*rB - r*rA**2*rB**2 + 2*r*rA \
        *rAB**3 - 4*r*rA*rAB**2*rB + 2*r*rA*rAB*rB**2 - r*rAB**4 + 2*r*rAB**3*rB - r*rAB**2*rB* \
        *2)
    return res

# Function H
def H(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = alphaB*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bA = (alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) - alphaB*h*rAB \
        *math.log(rAB))/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) \
        + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    aB = alphaA*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bB = -alphaA*h*rAB*math.log(rB)/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB \
        *math.log(rB) + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = (aA*alphaA*betaAB_1**2*rAB**2*math.sqrt(betaAB_1**2*betaAB_2**2*math.sin(betaAB_2*theta)**2 \
        + betaAB_1**2*math.cos(betaAB_2*theta)**2 + 2*betaAB_1*math.cos(betaAB_2*theta) + 1) \
        *math.cos(betaAB_2*theta)**2 + aA*alphaA*rA*rAB*math.sqrt(betaAB_1**2*betaAB_2**2 \
        *math.sin(betaAB_2*theta)**2 + betaAB_1**2*math.cos(betaAB_2*theta)**2 + 2*betaAB_1 \
        *math.cos(betaAB_2*theta) + 1) - aA*alphaA*rA*rB*math.sqrt(betaAB_1**2*betaAB_2**2 \
        *math.sin(betaAB_2*theta)**2 + betaAB_1**2*math.cos(betaAB_2*theta)**2 + 2*betaAB_1 \
        *math.cos(betaAB_2*theta) + 1) - aA*alphaA*rAB**2*math.sqrt(betaAB_1**2*betaAB_2**2 \
        *math.sin(betaAB_2*theta)**2 + betaAB_1**2*math.cos(betaAB_2*theta)**2 + 2*betaAB_1 \
        *math.cos(betaAB_2*theta) + 1) + aA*alphaA*rAB*rB*math.sqrt(betaAB_1**2*betaAB_2**2 \
        *math.sin(betaAB_2*theta)**2 + betaAB_1**2*math.cos(betaAB_2*theta)**2 + 2*betaAB_1 \
        *math.cos(betaAB_2*theta) + 1))/(aA*betaAB_1**3*rAB**3*math.log(rAB)*math.cos(betaAB_2 \
        *theta)**3 - aA*betaAB_1**2*rA*rAB**2*math.log(rAB)*math.cos(betaAB_2*theta)**2 + 3*aA \
        *betaAB_1**2*rAB**3*math.log(rAB)*math.cos(betaAB_2*theta)**2 - aA*betaAB_1**2*rAB**2 \
        *rB*math.log(rAB)*math.cos(betaAB_2*theta)**2 - 2*aA*betaAB_1*rA*rAB**2*math.log(rAB) \
        *math.cos(betaAB_2*theta) + aA*betaAB_1*rA*rAB*rB*math.log(rAB)*math.cos(betaAB_2 \
        *theta) + 3*aA*betaAB_1*rAB**3*math.log(rAB)*math.cos(betaAB_2*theta) - 2*aA*betaAB_1 \
        *rAB**2*rB*math.log(rAB)*math.cos(betaAB_2*theta) - aA*rA*rAB**2*math.log(rAB) + aA*rA \
        *rAB*rB*math.log(rAB) + aA*rAB**3*math.log(rAB) - aA*rAB**2*rB*math.log(rAB) - aB \
        *betaAB_1**3*rAB**3*math.log(rAB)*math.cos(betaAB_2*theta)**3 + aB*betaAB_1**2*rA*rAB* \
        *2*math.log(rAB)*math.cos(betaAB_2*theta)**2 - 3*aB*betaAB_1**2*rAB**3*math.log(rAB) \
        *math.cos(betaAB_2*theta)**2 + aB*betaAB_1**2*rAB**2*rB*math.log(rAB)*math.cos(betaAB_2 \
        *theta)**2 + 2*aB*betaAB_1*rA*rAB**2*math.log(rAB)*math.cos(betaAB_2*theta) - aB \
        *betaAB_1*rA*rAB*rB*math.log(rAB)*math.cos(betaAB_2*theta) - 3*aB*betaAB_1*rAB**3 \
        *math.log(rAB)*math.cos(betaAB_2*theta) + 2*aB*betaAB_1*rAB**2*rB*math.log(rAB) \
        *math.cos(betaAB_2*theta) + aB*rA*rAB**2*math.log(rAB) - aB*rA*rAB*rB*math.log(rAB) \
        - aB*rAB**3*math.log(rAB) + aB*rAB**2*rB*math.log(rAB) + bA*betaAB_1**3*rAB**3 \
        *math.cos(betaAB_2*theta)**3 - bA*betaAB_1**2*rA*rAB**2*math.cos(betaAB_2*theta)**2 + 3 \
        *bA*betaAB_1**2*rAB**3*math.cos(betaAB_2*theta)**2 - bA*betaAB_1**2*rAB**2*rB \
        *math.cos(betaAB_2*theta)**2 - 2*bA*betaAB_1*rA*rAB**2*math.cos(betaAB_2*theta) + bA \
        *betaAB_1*rA*rAB*rB*math.cos(betaAB_2*theta) + 3*bA*betaAB_1*rAB**3*math.cos(betaAB_2 \
        *theta) - 2*bA*betaAB_1*rAB**2*rB*math.cos(betaAB_2*theta) - bA*rA*rAB**2 + bA*rA*rAB \
        *rB + bA*rAB**3 - bA*rAB**2*rB - bB*betaAB_1**3*rAB**3*math.cos(betaAB_2*theta)**3 + bB \
        *betaAB_1**2*rA*rAB**2*math.cos(betaAB_2*theta)**2 - 3*bB*betaAB_1**2*rAB**3 \
        *math.cos(betaAB_2*theta)**2 + bB*betaAB_1**2*rAB**2*rB*math.cos(betaAB_2*theta)**2 + 2 \
        *bB*betaAB_1*rA*rAB**2*math.cos(betaAB_2*theta) - bB*betaAB_1*rA*rAB*rB \
        *math.cos(betaAB_2*theta) - 3*bB*betaAB_1*rAB**3*math.cos(betaAB_2*theta) + 2*bB \
        *betaAB_1*rAB**2*rB*math.cos(betaAB_2*theta) + bB*rA*rAB**2 - bB*rA*rAB*rB - bB*rAB**3 \
        + bB*rAB**2*rB)
    return res
