# Auto-generated by generate_code.py

import math

# Global constants
rA = 1.0
rAB = 0.75
rB = 0.5
alphaA = 2.0
alphaB = 1.0
wA = 1.0
wB = -1.0
h = 1.0
n = 4.0

# Function uA
def uA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = -r*wA*math.sin(theta)
    res[1] = r*wA*math.cos(theta)
    return res

# Function uB
def uB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = -r*wB*math.sin(theta)
    res[1] = r*wB*math.cos(theta)
    return res

# Function phiA
def phiA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = alphaB*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bA = (alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) - alphaB*h*rAB \
        *math.log(rAB))/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) \
        + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = (aA*math.log(r) + bA)*math.cos(n*theta)
    return res

# Function phiB
def phiB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aB = alphaA*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bB = -alphaA*h*rAB*math.log(rB)/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB \
        *math.log(rB) + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = (aB*math.log(r) + bB)*math.cos(n*theta)
    return res

# Function fA
def fA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = alphaB*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bA = (alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) - alphaB*h*rAB \
        *math.log(rAB))/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) \
        + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = (aA*alphaA*n**2*math.log(r)*math.cos(n*theta) - aA*n*r**2*wA*math.log(r)*math.sin(n*theta) \
        + alphaA*bA*n**2*math.cos(n*theta) - bA*n*r**2*wA*math.sin(n*theta))/r**2
    return res

# Function fB
def fB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aB = alphaA*h*rAB/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB*math.log(rB) + alphaB \
        *h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    bB = -alphaA*h*rAB*math.log(rB)/(alphaA*alphaB + alphaA*h*rAB*math.log(rAB) - alphaA*h*rAB \
        *math.log(rB) + alphaB*h*rAB*math.log(rA) - alphaB*h*rAB*math.log(rAB))
    res = (aB*alphaB*n**2*math.log(r)*math.cos(n*theta) - aB*n*r**2*wB*math.log(r)*math.sin(n*theta) \
        + alphaB*bB*n**2*math.cos(n*theta) - bB*n*r**2*wB*math.sin(n*theta))/r**2
    return res
