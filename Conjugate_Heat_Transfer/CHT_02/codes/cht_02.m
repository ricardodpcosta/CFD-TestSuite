% Auto-generated by generate_code.py

% Global constants
global rA = 1.0;
global rAB = 0.75;
global rB = 0.5;
global alphaA = 2.0;
global alphaB = 1.0;
global wA = 1.0;
global wB = -1.0;
global n = 4;

% Function uA
function res = uA(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    res = zeros(2,1);
    res(1) = r.*wA.*(-beta1.*beta2.*rAB.*(r - rA).*sin(beta2.*theta).*cos(theta) - (beta1.*rAB. ...
        *cos(beta2.*theta) - rA + rAB).*sin(theta))./(beta1.*rAB.*cos(beta2.*theta) - rA + rAB);
    res(2) = r.*wA.*(-beta1.*beta2.*rAB.*(r - rA).*sin(theta).*sin(beta2.*theta) + (beta1.*rAB. ...
        *cos(beta2.*theta) - rA + rAB).*cos(theta))./(beta1.*rAB.*cos(beta2.*theta) - rA + rAB);
end

% Function uB
function res = uB(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    res = zeros(2,1);
    res(1) = r.*wB.*(-beta1.*beta2.*rAB.*(r - rB).*sin(beta2.*theta).*cos(theta) - (beta1.*rAB. ...
        *cos(beta2.*theta) + rAB - rB).*sin(theta))./(beta1.*rAB.*cos(beta2.*theta) + rAB - rB);
    res(2) = r.*wB.*(-beta1.*beta2.*rAB.*(r - rB).*sin(theta).*sin(beta2.*theta) + (beta1.*rAB. ...
        *cos(beta2.*theta) + rAB - rB).*cos(theta))./(beta1.*rAB.*cos(beta2.*theta) + rAB - rB);
end

% Function phiA
function res = phiA(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    aA = alphaB./(-alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) + alphaA.*log(beta1.^2.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2) + alphaB.*log(gamma1 ...
        + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 ...
        + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2));
    bA = (alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) - alphaA.*log(beta1.^2.*gamma3.*rAB.^2. ...
        *cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2. ...
        *cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2) + alphaB.*log(beta1.^2.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2))./(alphaA.*log(gamma1 ...
        + gamma2.*rB + gamma3.*rB.^2) - alphaA.*log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 ...
        + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2) - alphaB.*log(gamma1 + gamma2.*rA + gamma3.*rA.^2) + alphaB. ...
        *log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2 ...
        *beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2));
    res = aA.*log(gamma1 + gamma2.*r + gamma3.*r.^2) + bA;
end

% Function phiB
function res = phiB(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    aB = alphaA./(-alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) + alphaA.*log(beta1.^2.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2) + alphaB.*log(gamma1 ...
        + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 ...
        + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2));
    bB = alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2)./(alphaA.*log(gamma1 + gamma2.*rB + gamma3. ...
        *rB.^2) - alphaA.*log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB. ...
        *cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB ...
        + gamma3.*rAB.^2) - alphaB.*log(gamma1 + gamma2.*rA + gamma3.*rA.^2) + alphaB.*log(beta1.^2. ...
        *gamma3.*rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1. ...
        *gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2));
    res = aB.*log(gamma1 + gamma2.*r + gamma3.*r.^2) + bB;
end

% Function fA
function res = fA(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    aA = alphaB./(-alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) + alphaA.*log(beta1.^2.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2) + alphaB.*log(gamma1 ...
        + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 ...
        + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2));
    bA = (alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) - alphaA.*log(beta1.^2.*gamma3.*rAB.^2. ...
        *cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2. ...
        *cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2) + alphaB.*log(beta1.^2.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2))./(alphaA.*log(gamma1 ...
        + gamma2.*rB + gamma3.*rB.^2) - alphaA.*log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 ...
        + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2) - alphaB.*log(gamma1 + gamma2.*rA + gamma3.*rA.^2) + alphaB. ...
        *log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2 ...
        *beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2));
    res = aA.*(alphaA.*(rA - rAB.*(beta1.*cos(beta2.*theta) + 1)).*(r.*(gamma2 + 2*gamma3.*r).^2 ...
        - (gamma2 + 4*gamma3.*r).*(gamma1 + gamma2.*r + gamma3.*r.^2)) + beta1.*beta2.*r.^2. ...
        *rAB.*wA.*(gamma2 + 2*gamma3.*r).*(r - rA).*(gamma1 + gamma2.*r + gamma3.*r.^2). ...
        *sin(beta2.*theta))./(r.*(rA - rAB.*(beta1.*cos(beta2.*theta) + 1)).*(gamma1 + gamma2. ...
        *r + gamma3.*r.^2).^2);
end

% Function fB
function res = fB(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    aB = alphaA./(-alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) + alphaA.*log(beta1.^2.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3. ...
        *rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2) + alphaB.*log(gamma1 ...
        + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 ...
        + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2));
    bB = alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2)./(alphaA.*log(gamma1 + gamma2.*rB + gamma3. ...
        *rB.^2) - alphaA.*log(beta1.^2.*gamma3.*rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB. ...
        *cos(beta2.*theta) + 2*beta1.*gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB ...
        + gamma3.*rAB.^2) - alphaB.*log(gamma1 + gamma2.*rA + gamma3.*rA.^2) + alphaB.*log(beta1.^2. ...
        *gamma3.*rAB.^2.*cos(beta2.*theta).^2 + beta1.*gamma2.*rAB.*cos(beta2.*theta) + 2*beta1. ...
        *gamma3.*rAB.^2.*cos(beta2.*theta) + gamma1 + gamma2.*rAB + gamma3.*rAB.^2));
    res = aB.*(alphaB.*(r.*(gamma2 + 2*gamma3.*r).^2 - (gamma2 + 4*gamma3.*r).*(gamma1 + gamma2.*r ...
        + gamma3.*r.^2)).*(beta1.*rAB.*cos(beta2.*theta) + rAB - rB) - beta1.*beta2.*r.^2.*rAB. ...
        *wB.*(gamma2 + 2*gamma3.*r).*(r - rB).*(gamma1 + gamma2.*r + gamma3.*r.^2).*sin(beta2. ...
        *theta))./(r.*(gamma1 + gamma2.*r + gamma3.*r.^2).^2.*(beta1.*rAB.*cos(beta2.*theta) ...
        + rAB - rB));
end
