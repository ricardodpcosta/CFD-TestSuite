% Auto-generated by generate_code.py

% Global constants
global rA = 1.0;
global rAB = 0.75;
global rB = 0.5;
global alphaA = 2.0;
global alphaB = 1.0;
global wA = 1.0;
global wB = -1.0;
global h = 1.0;
global n = 4;

% Function uA
function res = uA(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global h;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    res(1) = -r.*wA.*sin(theta);
    res(2) = r.*wA.*cos(theta);
end

% Function uB
function res = uB(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global h;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    res(1) = -r.*wB.*sin(theta);
    res(2) = r.*wB.*cos(theta);
end

% Function phiA
function res = phiA(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global h;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    aA = alphaB./(alphaA.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB ...
        + gamma3.*rB.^2) + alphaB.*log(gamma1 + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2));
    bA = (alphaA.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB ...
        + gamma3.*rB.^2) - alphaB.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2))./(alphaA.*log(gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) + alphaB. ...
        *log(gamma1 + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2));
    res = aA.*log(gamma1 + gamma2.*r + gamma3.*r.^2) + bA;
end

% Function phiB
function res = phiB(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global h;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    aB = alphaA./(alphaA.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB ...
        + gamma3.*rB.^2) + alphaB.*log(gamma1 + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2));
    bB = -alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2)./(alphaA.*log(gamma1 + gamma2.*rAB + gamma3. ...
        *rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) + alphaB.*log(gamma1 + gamma2.*rA ...
        + gamma3.*rA.^2) - alphaB.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2));
    res = aB.*log(gamma1 + gamma2.*r + gamma3.*r.^2) + bB;
end

% Function fA
function res = fA(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global h;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    aA = alphaB./(alphaA.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB ...
        + gamma3.*rB.^2) + alphaB.*log(gamma1 + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2));
    bA = (alphaA.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB ...
        + gamma3.*rB.^2) - alphaB.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2))./(alphaA.*log(gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) + alphaB. ...
        *log(gamma1 + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2));
    res = aA.*alphaA.*(r.*(gamma2 + 2*gamma3.*r).^2 - (gamma2 + 4*gamma3.*r).*(gamma1 + gamma2.*r ...
        + gamma3.*r.^2))./(r.*(gamma1 + gamma2.*r + gamma3.*r.^2).^2);
end

% Function fB
function res = fB(x, y)
    global rA;
    global rAB;
    global rB;
    global alphaA;
    global alphaB;
    global wA;
    global wB;
    global h;
    global n;
    r = sqrt(x.^2 + y.^2);
    theta = atan2(y, x);
    aB = alphaA./(alphaA.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB ...
        + gamma3.*rB.^2) + alphaB.*log(gamma1 + gamma2.*rA + gamma3.*rA.^2) - alphaB.*log(gamma1 ...
        + gamma2.*rAB + gamma3.*rAB.^2));
    bB = -alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2)./(alphaA.*log(gamma1 + gamma2.*rAB + gamma3. ...
        *rAB.^2) - alphaA.*log(gamma1 + gamma2.*rB + gamma3.*rB.^2) + alphaB.*log(gamma1 + gamma2.*rA ...
        + gamma3.*rA.^2) - alphaB.*log(gamma1 + gamma2.*rAB + gamma3.*rAB.^2));
    res = aB.*alphaB.*(r.*(gamma2 + 2*gamma3.*r).^2 - (gamma2 + 4*gamma3.*r).*(gamma1 + gamma2.*r ...
        + gamma3.*r.^2))./(r.*(gamma1 + gamma2.*r + gamma3.*r.^2).^2);
end
