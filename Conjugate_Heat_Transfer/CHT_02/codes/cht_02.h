// Auto-generated by generate_code.py

#ifndef CHT_02_H

#define CHT_02_H

#include <cmath>

// Global constants
double rA = 1.0;
double rAB = 0.75;
double rB = 0.5;
double alphaA = 2.0;
double alphaB = 1.0;
double wA = 1.0;
double wB = -1.0;
double h = 1.0;
double n = 4;

// Function uA
inline void uA(double x, double y, double res[2]) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    res[0] = -r*wA*sin(theta);
    res[1] = r*wA*cos(theta);
}

// Function uB
inline void uB(double x, double y, double res[2]) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    res[0] = -r*wB*sin(theta);
    res[1] = r*wB*cos(theta);
}

// Function phiA
inline double phiA(double x, double y) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    double aA = alphaB/(alphaA*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 \
        + gamma2*rB + gamma3*pow(rB, 2)) + alphaB*log(gamma1 + gamma2*rA + gamma3*pow(rA, 2)) - alphaB \
        *log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)));
    double bA = (alphaA*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 + gamma2*rB \
        + gamma3*pow(rB, 2)) - alphaB*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)))/(alphaA \
        *log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 + gamma2*rB + gamma3 \
        *pow(rB, 2)) + alphaB*log(gamma1 + gamma2*rA + gamma3*pow(rA, 2)) - alphaB*log(gamma1 + gamma2 \
        *rAB + gamma3*pow(rAB, 2)));
    double res = aA*log(gamma1 + gamma2*r + gamma3*pow(r, 2)) + bA;
    return res;
}

// Function phiB
inline double phiB(double x, double y) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    double aB = alphaA/(alphaA*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 \
        + gamma2*rB + gamma3*pow(rB, 2)) + alphaB*log(gamma1 + gamma2*rA + gamma3*pow(rA, 2)) - alphaB \
        *log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)));
    double bB = -alphaA*log(gamma1 + gamma2*rB + gamma3*pow(rB, 2))/(alphaA*log(gamma1 + gamma2*rAB \
        + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 + gamma2*rB + gamma3*pow(rB, 2)) + alphaB*log(gamma1 \
        + gamma2*rA + gamma3*pow(rA, 2)) - alphaB*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)));
    double res = aB*log(gamma1 + gamma2*r + gamma3*pow(r, 2)) + bB;
    return res;
}

// Function fA
inline double fA(double x, double y) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    double aA = alphaB/(alphaA*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 \
        + gamma2*rB + gamma3*pow(rB, 2)) + alphaB*log(gamma1 + gamma2*rA + gamma3*pow(rA, 2)) - alphaB \
        *log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)));
    double bA = (alphaA*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 + gamma2*rB \
        + gamma3*pow(rB, 2)) - alphaB*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)))/(alphaA \
        *log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 + gamma2*rB + gamma3 \
        *pow(rB, 2)) + alphaB*log(gamma1 + gamma2*rA + gamma3*pow(rA, 2)) - alphaB*log(gamma1 + gamma2 \
        *rAB + gamma3*pow(rAB, 2)));
    double res = aA*alphaA*(r*pow(gamma2 + 2*gamma3*r, 2) - (gamma2 + 4*gamma3*r)*(gamma1 + gamma2*r \
        + gamma3*pow(r, 2)))/(r*pow(gamma1 + gamma2*r + gamma3*pow(r, 2), 2));
    return res;
}

// Function fB
inline double fB(double x, double y) {
    double r = sqrt(pow(x, 2) + pow(y, 2));
    double theta = atan2(y, x);
    double aB = alphaA/(alphaA*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 \
        + gamma2*rB + gamma3*pow(rB, 2)) + alphaB*log(gamma1 + gamma2*rA + gamma3*pow(rA, 2)) - alphaB \
        *log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)));
    double bB = -alphaA*log(gamma1 + gamma2*rB + gamma3*pow(rB, 2))/(alphaA*log(gamma1 + gamma2*rAB \
        + gamma3*pow(rAB, 2)) - alphaA*log(gamma1 + gamma2*rB + gamma3*pow(rB, 2)) + alphaB*log(gamma1 \
        + gamma2*rA + gamma3*pow(rA, 2)) - alphaB*log(gamma1 + gamma2*rAB + gamma3*pow(rAB, 2)));
    double res = aB*alphaB*(r*pow(gamma2 + 2*gamma3*r, 2) - (gamma2 + 4*gamma3*r)*(gamma1 + gamma2*r \
        + gamma3*pow(r, 2)))/(r*pow(gamma1 + gamma2*r + gamma3*pow(r, 2), 2));
    return res;
}

#endif
