# Auto-generated by generate_code.py

import math

# Global constants
rA = 1.0
rAB = 0.75
rB = 0.5
alphaA = 2.0
alphaB = 1.0
wA = 1.0
wB = -1.0
n = 4.0

# Function uA
def uA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = -r*wA*math.sin(theta)
    res[1] = r*wA*math.cos(theta)
    return res

# Function uB
def uB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = -r*wB*math.sin(theta)
    res[1] = r*wB*math.cos(theta)
    return res

# Function phiA
def phiA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = alphaB/(alphaA*math.log(rAB) - alphaA*math.log(rB) + alphaB*math.log(rA) - alphaB \
        *math.log(rAB))
    bA = (alphaA*math.log(rAB) - alphaA*math.log(rB) - alphaB*math.log(rAB))/(alphaA*math.log(rAB) \
        - alphaA*math.log(rB) + alphaB*math.log(rA) - alphaB*math.log(rAB))
    res = (aA*math.log(r) + bA)*math.cos(n*theta)
    return res

# Function phiB
def phiB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aB = alphaA/(alphaA*math.log(rAB) - alphaA*math.log(rB) + alphaB*math.log(rA) - alphaB \
        *math.log(rAB))
    bB = -alphaA*math.log(rB)/(alphaA*math.log(rAB) - alphaA*math.log(rB) + alphaB*math.log(rA) \
        - alphaB*math.log(rAB))
    res = (aB*math.log(r) + bB)*math.cos(n*theta)
    return res

# Function fA
def fA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = alphaB/(alphaA*math.log(rAB) - alphaA*math.log(rB) + alphaB*math.log(rA) - alphaB \
        *math.log(rAB))
    bA = (alphaA*math.log(rAB) - alphaA*math.log(rB) - alphaB*math.log(rAB))/(alphaA*math.log(rAB) \
        - alphaA*math.log(rB) + alphaB*math.log(rA) - alphaB*math.log(rAB))
    res = -n*(aA*math.log(r) + bA)*(-alphaA*n*math.cos(n*theta) + r**2*wA*math.sin(n*theta))/r**2
    return res

# Function fB
def fB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aB = alphaA/(alphaA*math.log(rAB) - alphaA*math.log(rB) + alphaB*math.log(rA) - alphaB \
        *math.log(rAB))
    bB = -alphaA*math.log(rB)/(alphaA*math.log(rAB) - alphaA*math.log(rB) + alphaB*math.log(rA) \
        - alphaB*math.log(rAB))
    res = -n*(aB*math.log(r) + bB)*(-alphaB*n*math.cos(n*theta) + r**2*wB*math.sin(n*theta))/r**2
    return res
