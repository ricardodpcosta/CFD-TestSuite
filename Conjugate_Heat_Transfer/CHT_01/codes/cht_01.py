# Auto-generated by generate_code.py

import math

# Global constants
rA = 1.0
rAB = 0.75
rB = 0.5
alphaA = 2.0
alphaB = 1.0
nA = 4
nB = 4
wA = 1.0
wB = -1.0

# Function uA
def uA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = -r*wA*math.sin(theta)
    res[1] = r*wA*math.cos(theta)
    return res

# Function uB
def uB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    res = [0.0]*2
    res[0] = -r*wB*math.sin(theta)
    res[1] = r*wB*math.cos(theta)
    return res

# Function phiA
def phiA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = -alphaB/math.log(rA**(-alphaB)*rAB**(alphaA + alphaB)*rB**(-alphaA))
    bA = math.log(rAB**(alphaA + alphaB)*rB**(-alphaA))/math.log(rA**(-alphaB)*rAB**(alphaA + alphaB)
        *rB**(-alphaA))
    res = (aA*math.log(r) + bA)*math.cos(nA*theta)
    return res

# Function phiB
def phiB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aB = alphaA*math.cos(nA*theta)/(math.log(rA**(-alphaB)*rAB**(alphaA + alphaB)*rB**(-alphaA))
        *math.cos(nB*theta))
    bB = -math.log(rB**(alphaA*math.cos(nA*theta)))/(math.log(rA**(-alphaB)*rAB**(alphaA + alphaB)*rB*
        *(-alphaA))*math.cos(nB*theta))
    res = (aB*math.log(r) + bB)*math.cos(nB*theta)
    return res

# Function fA
def fA(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aA = -alphaB/math.log(rA**(-alphaB)*rAB**(alphaA + alphaB)*rB**(-alphaA))
    bA = math.log(rAB**(alphaA + alphaB)*rB**(-alphaA))/math.log(rA**(-alphaB)*rAB**(alphaA + alphaB)
        *rB**(-alphaA))
    res = nA*(aA*math.log(r) + bA)*(alphaA*nA*math.cos(nA*theta) - r**2*wA*math.sin(nA*theta))/r**2
    return res

# Function fB
def fB(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    aB = alphaA*math.cos(nA*theta)/(math.log(rA**(-alphaB)*rAB**(alphaA + alphaB)*rB**(-alphaA))
        *math.cos(nB*theta))
    bB = -math.log(rB**(alphaA*math.cos(nA*theta)))/(math.log(rA**(-alphaB)*rAB**(alphaA + alphaB)*rB*
        *(-alphaA))*math.cos(nB*theta))
    res = nB*(aB*math.log(r) + bB)*(alphaB*nB*math.cos(nB*theta) - r**2*wB*math.sin(nB*theta))/r**2
    return res
